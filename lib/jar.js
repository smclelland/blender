// Generated by CoffeeScript 1.3.3
(function() {
  var Jar, ScriptNode, StyleNode, async, crypto, death, fs, nib, path, stylus, uglify;

  path = require('path');

  fs = require('fs');

  uglify = require("uglify-js");

  crypto = require('crypto');

  stylus = require('stylus');

  nib = require('nib');

  async = require('async');

  ScriptNode = require('./jarnode').ScriptNode;

  StyleNode = require('./jarnode').StyleNode;

  death = require('./util').death;

  /*
  graph made with an adjacency list
  */


  module.exports = Jar = (function() {

    Jar.prototype.rootNode = null;

    Jar.prototype.styleDependencies = {};

    Jar.prototype.userDependencies = {};

    Jar.prototype.vendorDependencies = {};

    Jar.prototype.jsTagList = [];

    Jar.prototype.cssTagList = [];

    Jar.prototype.nodeIndex = {};

    Jar.prototype.vendors = [];

    Jar.prototype.modularize = true;

    Jar.prototype.watchList = [];

    function Jar(name, emitter, urlRoot, production, options) {
      var _this = this;
      this.name = name;
      this.emitter = emitter;
      this.urlRoot = urlRoot;
      this.production = production;
      this.options = options;
      options.dir = path.resolve(options.dir);
      options.main = path.join(options.dir, "" + options.main + ".coffee");
      if (options.style != null) {
        options.style = path.join(options.dir, "" + options.style + ".styl");
        if (!fs.existsSync(options.style)) {
          death("Missing main style sheet: " + options.style);
        }
      }
      if (!fs.existsSync(options.main)) {
        death("Missing main: " + options.main);
      }
      this.emitter.on('change', function(jar, node) {
        return _this.onChange(jar, node);
      });
    }

    /*
      main build process
    */


    Jar.prototype.build = function() {
      var startTime, v, _i, _len, _ref,
        _this = this;
      startTime = new Date().getTime();
      this.styleDependencies = {};
      this.userDependencies = {};
      this.vendorDependencies = {};
      this.jsTagList = [];
      this.cssTagList = [];
      this.nodeIndex = [];
      this.unwatchAll();
      this.rootNode = this.addUserDependency(this.options.main);
      this.walkUserDependencies(this.rootNode);
      _ref = this.options.vendors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        this.addVendorDependency(v);
      }
      return async.series([
        function(callback) {
          if (_this.options.style != null) {
            return _this.addStyleDependency(_this.options.style, callback);
          }
        }, function(callback) {
          var endTime, packagedDependencies;
          if (_this.production) {
            if (_this.options["package"]) {
              if (_this.options.common) {
                sugar.warn("Common packages are included in " + _this.name + " package");
              }
              packagedDependencies = _.extend(_this.userDependencies, _this.vendorDependencies);
              _this.buildProduction(packagedDependencies, "" + _this.name + "_packaged", _this.options.minify);
            } else {
              _this.buildProduction(_this.vendorDependencies, "" + _this.name + "_vendor", false);
              _this.buildProduction(_this.userDependencies, "" + _this.name + "_user", _this.options.minify);
            }
            _this.buildProductionStyle(_this.styleDependencies, 'style');
          } else {
            _this.buildDevelopment(_this.jsTagList, _this.vendorDependencies, 'vendor');
            _this.buildDevelopment(_this.jsTagList, _this.userDependencies, 'user');
            _this.buildDevelopment(_this.cssTagList, _this.styleDependencies, 'style');
          }
          _this.buildInitialize();
          _this.jsTags = _this.jsTagList.join('');
          _this.cssTags = _this.cssTagList.join('');
          endTime = new Date().getTime();
          return sugar.info(("Blender rebuild [" + _this.name + "]: ").blue, ("" + (endTime - startTime) + "ms").grey);
        }
      ]);
    };

    /*
      recursively walk these bitches
    */


    Jar.prototype.walkUserDependencies = function(node) {
      var dep, _i, _len, _ref, _results;
      _ref = node.dependencies;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dep = _ref[_i];
        if (!this.userDependencies[dep]) {
          node = this.addUserDependency(dep);
          _results.push(this.walkUserDependencies(node));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Jar.prototype.addStyleDependency = function(pathName, callback) {
      var node,
        _this = this;
      sugar.info("add style dep: " + pathName);
      node = new StyleNode(pathName, this.options.dir);
      node.build(function(err) {
        _this.styleDependencies[pathName] = node;
        _this.watch(node);
        return callback(err);
      });
      return node;
    };

    /*
    */


    Jar.prototype.addUserDependency = function(pathName) {
      var node;
      sugar.info("add user dep: " + pathName);
      node = new ScriptNode(pathName, this.options.dir, this.modularize);
      this.userDependencies[pathName] = node;
      this.watch(node);
      return node;
    };

    /*
      ./vendor
    */


    Jar.prototype.addVendorDependency = function(pathName) {
      var modularize, node, remote, vendorPath, vendorRootPath;
      remote = pathName.substring(0, 7) === "http://";
      modularize = false;
      vendorPath = pathName;
      if (!remote) {
        if (pathName[0] === '[' && pathName[pathName.length - 1] === ']') {
          vendorPath = pathName.slice(1, pathName.length - 1);
          modularize = true;
        }
        vendorPath = path.resolve(vendorPath);
        vendorRootPath = path.dirname(vendorPath);
      }
      node = new ScriptNode(vendorPath, vendorRootPath, modularize, remote);
      this.vendorDependencies[pathName] = node;
      if (!remote) {
        this.watch(node);
      }
      return node;
    };

    /*
      make a nice MD5 hash for the file names in production
    */


    Jar.prototype.hashContents = function(contents) {
      var sum;
      sum = crypto.createHash('sha1');
      sum.update(contents);
      return sum.digest('hex').substring(16, 0);
    };

    /*
      uglify that crap for prod
    */


    Jar.prototype.minify = function(buffer) {
      var ast, jsp, pro;
      jsp = uglify.parser;
      pro = uglify.uglify;
      ast = jsp.parse(buffer);
      return pro.gen_code(ast);
    };

    /*
      fires in the final script which kicks off the entire process
    */


    Jar.prototype.buildInitialize = function() {
      return this.jsTagList.push("\n<script>require(\"" + this.rootNode.moduleId + "\");</script>\n");
    };

    Jar.prototype.buildProductionStyle = function(dependencies, description) {
      var buffer, fileName, filePath, hash, key, node;
      buffer = '';
      for (key in dependencies) {
        node = dependencies[key];
        sugar.info("CONTENTS");
        sugar.info(node.contents);
        if (node.remote) {
          this.cssTagList.push("\n<link rel=\"stylesheet\" href=\"" + key + "\" type=\"text/css\" media=\"screen\">");
        } else {
          buffer += node.contents;
        }
      }
      if (buffer.length > 0) {
        hash = this.hashContents(buffer);
        fileName = "" + description + "-" + hash + ".css";
        this.cssTagList.push("\n<link rel=\"stylesheet\" href=\"" + this.urlRoot + "/" + fileName + "\" type=\"text/css\" media=\"screen\">");
        filePath = path.join(this.options.js_build_dir, fileName);
        return fs.writeFile(path.resolve(filePath), buffer, function(err) {
          if (err) {
            throw err;
          }
          return sugar.info(("Blender write production: " + description).blue);
        });
      }
    };

    /*
      builds the production files
    */


    Jar.prototype.buildProduction = function(dependencies, description, minify) {
      var buffer, fileName, filePath, hash, key, node;
      if (minify == null) {
        minify = false;
      }
      buffer = '';
      for (key in dependencies) {
        node = dependencies[key];
        if (node.remote) {
          this.jsTagList.push("\n<script type=\"text/javascript\" src=\"" + key + "\"></script>");
        } else {
          buffer += node.contents;
        }
      }
      if (buffer.length > 0) {
        if (minify) {
          buffer = this.minify(buffer);
        }
        hash = this.hashContents(buffer);
        fileName = "" + description + "-" + hash + ".js";
        this.jsTagList.push("\n<script type=\"text/javascript\" src=\"" + this.urlRoot + "/" + fileName + "\"></script>");
        filePath = path.join(this.options.js_build_dir, fileName);
        return fs.writeFile(path.resolve(filePath), buffer, function(err) {
          if (err) {
            throw err;
          }
          return sugar.info(("Blender write production: " + description).blue);
        });
      }
    };

    /*
      builds up the script tags
    */


    Jar.prototype.buildDevelopment = function(tagList, dependencies, description) {
      var name, node, src;
      tagList.push("\n<!-- blender " + description + "-->");
      for (name in dependencies) {
        node = dependencies[name];
        if (node.remote) {
          src = node.outputPath;
        } else {
          src = path.join(this.urlRoot, this.name, node.outputPath, node.outputName);
        }
        switch (node.type) {
          case 'script':
            tagList.push("\n<script type=\"text/javascript\" src=\"" + src + "\"></script>");
            break;
          case 'style':
            tagList.push("\n<link rel=\"stylesheet\" href=\"" + src + "\" type=\"text/css\" media=\"screen\">");
            break;
          default:
            death('unknown node type');
        }
        if (!node.remote) {
          this.nodeIndex[src] = node;
        }
      }
      return tagList.push("\n<!-- end blender " + " -->\n");
    };

    /*
      when a file change event happens, rebuild the entire tree
      sub-optimal but, good enough for now
    */


    Jar.prototype.onChange = function(jar, node) {
      this.build();
      return this.emitter.emit('jar_rebuild', this, node);
    };

    /*
      unwatcher
    */


    Jar.prototype.unwatchAll = function() {
      var f, _i, _len, _ref;
      _ref = this.watchList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        fs.unwatchFile(f);
      }
      return this.watchList = [];
    };

    /*
      watcher watcher
    */


    Jar.prototype.watch = function(node) {
      var options,
        _this = this;
      options = {
        persistent: this.options.persistent
      };
      this.watchList.push(node.pathName);
      options.interval = 100;
      fs.watchFile(node.pathName, options, function(curr, prev) {
        if (curr.mtime.getTime() !== prev.mtime.getTime()) {
          return _this.emitter.emit('change', _this, node);
        }
      });
      return this.emitter.emit('add', this, node);
    };

    return Jar;

  })();

}).call(this);
