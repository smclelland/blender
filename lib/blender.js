// Generated by CoffeeScript 1.3.3
(function() {
  var Blender, EventEmitter, Jar, death, debug, fs, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  global.sugar = require('sugar');

  global._ = require('underscore');

  debug = require('debug')('blender');

  EventEmitter = require('events').EventEmitter;

  Jar = require('./jar');

  death = require('./util').death;

  Blender = (function() {

    Blender.prototype.jars = {};

    Blender.prototype.options = null;

    Blender.prototype.production = false;

    Blender.prototype.nodeIndex = {};

    function Blender() {
      this.middleWare = __bind(this.middleWare, this);

      var _this = this;
      this.emitter = new EventEmitter();
      this.emitter.on('jar_rebuild', function(jar, node) {
        return _this.onJarRebuild(jar, node);
      });
    }

    Blender.prototype.onJarRebuild = function(jar, node) {
      return this.rebuildUrlIndex();
    };

    /*
      Rebuild the index used during dev lookups
    */


    Blender.prototype.rebuildUrlIndex = function() {
      var jar, name, node, src, _ref, _results;
      this.nodeIndex = [];
      _ref = this.jars;
      _results = [];
      for (name in _ref) {
        jar = _ref[name];
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = jar.nodeIndex;
          _results1 = [];
          for (src in _ref1) {
            node = _ref1[src];
            _results1.push(this.nodeIndex[src] = node);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    /*
      get 'er all set
    */


    Blender.prototype.init = function(options) {
      var jar, jarOptions, name, urlRoot, _ref, _ref1;
      this.options = options;
      this.production = process.env.NODE_ENV === "production";
      options.common.js_build_dir = path.resolve("" + (path.join(options.common.build_dir, 'scripts')));
      options.common.css_build_dir = path.resolve("" + (path.join(options.common.build_dir, 'styles')));
      urlRoot = '';
      if (options.common.url_path == null) {
        options.common.url_path = '/blender';
      }
      if (this.production) {
        if (options.common.production_host != null) {
          urlRoot = "http://" + (path.join(options.common.production_host, options.common.url_path));
        } else {
          urlRoot = options.common.url_path;
        }
      } else {
        urlRoot = options.common.url_path;
      }
      console.log("URLROOT: " + urlRoot);
      for (name in options) {
        jarOptions = options[name];
        if (name === 'common') {
          continue;
        }
        if ((_ref = jarOptions.vendors) == null) {
          jarOptions.vendors = [];
        }
        jarOptions.js_build_dir = options.common.js_build_dir;
        jarOptions.css_build_dir = options.common.css_build_dir;
        if ((_ref1 = jarOptions.minify) == null) {
          jarOptions.minify = true;
        }
        if (!(jarOptions.common != null) || jarOptions.common) {
          jarOptions.vendors = _.union(options.common.vendors, jarOptions.vendors);
        }
        this.jars[name] = jar = new Jar(name, this.emitter, urlRoot, this.production, jarOptions);
        jar.build();
      }
      return this.rebuildUrlIndex();
    };

    /*
      express middleware
    */


    Blender.prototype.middleWare = function(req, res, next) {
      var fileExt, node, urlPath, urlRoot;
      if ('GET' !== req.method) {
        return next();
      }
      urlRoot = this.options.common.url_path;
      if (req.url.slice(0, urlRoot.length) !== urlRoot) {
        return next();
      }
      urlPath = req.url.split('/');
      debug(urlPath);
      fileExt = urlPath[urlPath.length - 1].split('.')[1];
      node = this.nodeIndex[req.url];
      if (!node) {
        return next();
      }
      sugar.info(("Blender serve: " + req.url).blue);
      res.set('Content-Type', node.contentType);
      return res.send(node.contents);
    };

    /*
      will it blend?
    */


    Blender.prototype.blend = function(app, options) {
      var _this = this;
      debug("blending");
      sugar.info("=> Blender");
      this.init(options);
      app.locals.blenderJs = function(name) {
        return _this.jars[name].jsTags;
      };
      app.locals.blenderCss = function(name) {
        return _this.jars[name].cssTags;
      };
      return app.use(this.middleWare);
    };

    return Blender;

  })();

  module.exports = new Blender();

}).call(this);
